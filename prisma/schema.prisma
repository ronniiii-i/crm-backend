// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Required for Neon
}

enum Role {
  ADMIN
  MANAGER
  USER
  GUEST
}

enum Department {
  ADMINISTRATION
  HUMAN_RESOURCES
  SALES
  OPERATIONS
  FINANCE
  INFORMATION_TECHNOLOGY
  CUSTOMER_SERVICE
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String
  role        Role      @default(USER)
  avatarUrl   String?
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isVerified   Boolean   @default(false)
  verifyToken  String?
  verifyExpires DateTime?
  resetToken   String?
  resetExpires  DateTime?
  department Department?
  managedDepartment Department? @unique

  // Relations
  contacts           Contact[]
  projects           Project[]
  tasks              Task[]
  notifications      Notification[]
  uploadedFiles      ProjectFile[]
  projectMemberships ProjectMember[]
  departments        Department[]    @relation("DepartmentMembers")
  managedDepts       Department[]    @relation("DepartmentManagers")
}

model Contact {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  company   String?
  jobTitle  String?
  notes     String?
  status    String   @default("Lead") // Lead, Customer, Partner, etc.
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional tags/categories
  tags String[]
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String    @default("Planning") // Planning, Active, Completed, Archived
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  priority    Int       @default(1)
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tasks       Task[]
  files       ProjectFile[]
  teamMembers ProjectMember[]
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String?
  status       String    @default("Todo") // Todo, In Progress, Done
  priority     Int       @default(1)
  dueDate      DateTime?
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User      @relation(fields: [assignedToId], references: [id])
  assignedToId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Department {
  id          String   @id @default(uuid())
  name        String
  description String?
  manager     User     @relation("DepartmentManagers", fields: [managerId], references: [id])
  managerId   String
  members     User[]   @relation("DepartmentMembers")
  createdAt   DateTime @default(now())
}

model InventoryItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  sku         String?  @unique
  quantity    Int      @default(0)
  unit        String   @default("pcs")
  minStock    Int      @default(5)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  read      Boolean  @default(false)
  type      String // "system", "message", "alert"
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model ProjectFile {
  id         String   @id @default(uuid())
  name       String
  url        String
  size       Int
  type       String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  uploadedBy User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model ProjectMember {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String   @default("Member") // Member, Viewer, Manager
  joinedAt  DateTime @default(now())
}
