// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Required for Neon
}

enum Role {
  ADMIN
  HOD
  LEAD
  STAFF
}

enum DepartmentType {
  ADMINISTRATION
  HUMAN_RESOURCES
  SALES
  OPERATIONS
  FINANCE
  INFORMATION_TECHNOLOGY
  CUSTOMER_SERVICE
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(STAFF)
  avatarUrl     String?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isVerified    Boolean   @default(false)
  verifyToken   String?
  verifyExpires DateTime?
  resetToken    String?
  resetExpires  DateTime?
  departmentId  String?   @map("department")

  // Relations
  contacts           Contact[]
  projects           Project[]
  tasks              Task[]
  notifications      Notification[]
  uploadedFiles      ProjectFile[]
  projectMemberships ProjectMember[]
  department         Department?        @relation("DepartmentMembers", fields: [departmentId], references: [id])
  managedDepartment  Department?        @relation("DepartmentManager")
  blacklistedTokens  BlacklistedToken[]
  expenses           Expense[]
  assignedDeals      Deal[]             @relation("DealAssignedTo")
  assignedTickets    SupportTicket[]    @relation("UserTickets")
  attendanceRecords  AttendanceRecord[]

  @@map("users")
}

model Contact {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  company   String?
  jobTitle  String?
  notes     String?
  status    String   @default("Lead") // Lead, Customer, Partner, etc.
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional tags/categories
  tags           String[]
  invoices       Invoice[]
  deals          Deal[]
  supportTickets SupportTicket[]
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String    @default("Planning") // Planning, Active, Completed, Archived
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  priority    Int       @default(1)
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tasks       Task[]
  files       ProjectFile[]
  teamMembers ProjectMember[]
}

model Task {
  id           String    @id @default(uuid())
  title        String
  description  String?
  status       String    @default("Todo") // Todo, In Progress, Done
  priority     Int       @default(1)
  dueDate      DateTime?
  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User      @relation(fields: [assignedToId], references: [id])
  assignedToId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Department {
  id          String         @id @default(uuid())
  name        String
  description String?
  type        DepartmentType
  managerId   String?        @unique
  manager     User?          @relation("DepartmentManager", fields: [managerId], references: [id])
  members     User[]         @relation("DepartmentMembers")
  createdAt   DateTime       @default(now())

  expenses Expense[]
}

model InventoryItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  sku         String?  @unique
  quantity    Int      @default(0)
  unit        String   @default("pcs")
  minStock    Int      @default(5)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  read      Boolean  @default(false)
  type      String // "system", "message", "alert", "security"
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model ProjectFile {
  id         String   @id @default(uuid())
  name       String
  url        String
  size       Int
  type       String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  uploadedBy User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model ProjectMember {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String   @default("Member") // Member, Viewer, Manager
  joinedAt  DateTime @default(now())
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("blacklisted_tokens")
}

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique
  customer      Contact   @relation(fields: [customerId], references: [id])
  customerId    String
  amount        Float
  status        String    @default("Pending") // Pending, Paid, Overdue, Cancelled
  dueDate       DateTime
  paidDate      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  payments Payment[] // One invoice can have many payments
}

model Payment {
  id        String   @id @default(uuid())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  paidAt    DateTime @default(now())
  method    String // e.g., Credit Card, Bank Transfer
  createdAt DateTime @default(now())
}

model Expense {
  id           String     @id @default(uuid())
  description  String
  amount       Float
  category     String // e.g., Travel, Supplies
  incurredAt   DateTime
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  createdBy    User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
}

enum DealStatus {
  LEAD
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

model Deal {
  id         String     @id @default(uuid())
  name       String
  contact    Contact    @relation(fields: [contactId], references: [id])
  contactId  String
  amount     Float
  status     DealStatus @default(LEAD)
  closeDate  DateTime?
  assignedTo User       @relation("DealAssignedTo", fields: [userId], references: [id])
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model SupportTicket {
  id             String       @id @default(uuid())
  subject        String
  description    String?
  status         TicketStatus @default(OPEN)
  priority       Int          @default(1)
  createdBy      Contact      @relation(fields: [contactId], references: [id])
  contactId      String
  assignedTo     User?        @relation("UserTickets", fields: [userId], references: [id])
  userId         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resolvedAt     DateTime?
  slaDueDate     DateTime?
  customerRating Int?
}

model AttendanceRecord {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  status    String // Present, Absent, Leave, etc.
  createdAt DateTime @default(now())
}

model QuickAction {
  id          String   @id @default(uuid())
  name        String
  description String?
  command     String   // Backend command or API endpoint
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
